type Token = record {arbitrary_data: text;};
type Timestamp = text;
type StreamingStrategy = variant {Callback: CallbackStrategy;};
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt Token;
 };
type Result_1 = 
 variant {
   err;
   ok: text;
 };
type Result = 
 variant {
   err;
   ok;
 };
type RakeoffStats = 
 record {
   average_icp_per_pool: nat64;
   average_icp_win_amount: nat64;
   highest_icp_pool: nat64;
   highest_icp_win_amount: nat64;
   icp_claimed_from_achievements: nat64;
   icp_fees_collected: nat64;
   icp_fees_from_icp_disbursement: nat64;
   pool_history_chart_data: vec record {
                                  Timestamp;
                                  PoolAmount;
                                };
   total_icp_pools_successfully_completed: nat;
   total_icp_rewarded: nat64;
   total_icp_staked: nat64;
   total_icp_stakers: nat;
   total_icp_winner_processing_failures: nat;
   total_icp_winners_processed: nat;
   total_neurons_in_achievements: nat;
 };
type PoolAmount = text;
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
   upgrade: opt bool;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type CallbackStrategy = 
 record {
   callback: func (Token) -> (StreamingCallbackHttpResponse) query;
   token: Token;
 };
service : {
  controller_clear_server_cache: () -> ();
  controller_get_api_key: () -> (Result_1);
  controller_set_api_key: (text) -> (Result_1);
  controller_update_cached_stats: () -> ();
  get_rakeoff_stats: () -> (RakeoffStats) query;
  http_request: (HttpRequest) -> (HttpResponse) query;
  http_request_update: (HttpRequest) -> (HttpResponse);
  track_user_staked_amount: (text, nat64) -> (Result);
}
